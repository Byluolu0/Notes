信号相关

First the signals described in the original POSIX.1-1990 standard.

Signal     Value     Action   Comment
──────────────────────────────────────────────────────────────────────
SIGHUP        1       Term    Hangup detected on controlling terminal
							 or death of controlling process
SIGINT        2       Term    Interrupt from keyboard
SIGQUIT       3       Core    Quit from keyboard
SIGILL        4       Core    Illegal Instruction
SIGABRT       6       Core    Abort signal from abort(3)
SIGFPE        8       Core    Floating-point exception
SIGKILL       9       Term    Kill signal
SIGSEGV      11       Core    Invalid memory reference
SIGPIPE      13       Term    Broken pipe: write to pipe with no
							 readers; see pipe(7)
SIGALRM      14       Term    Timer signal from alarm(2)
SIGTERM      15       Term    Termination signal
SIGUSR1   30,10,16    Term    User-defined signal 1
SIGUSR2   31,12,17    Term    User-defined signal 2
SIGCHLD   20,17,18    Ign     Child stopped or terminated
SIGCONT   19,18,25    Cont    Continue if stopped
SIGSTOP   17,19,23    Stop    Stop process
SIGTSTP   18,20,24    Stop    Stop typed at terminal
SIGTTIN   21,21,26    Stop    Terminal input for background process
SIGTTOU   22,22,27    Stop    Terminal output for background process

The signals SIGKILL and SIGSTOP cannot be caught, blocked, or
ignored.

1. SIGHUP
SIGHUP 控制终端结束或这父进程结束会收到

command  >  out.file  2>&1  & 
后台执行，并且标准输出和错误输出写到文件里

nohup command > myout.file 2>&1 &
nohup表示即使关掉终端，后台程序也保持运行，但前提是终端正常退出。

2. SIGINT
程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程。

3. SIGQUIT
和SIGINT类似, 但由QUIT字符(通常是Ctrl-\)来控制. 进程在因收到SIGQUIT退出时会产生core文件, 在这个意义上类似于一个程序错误信号。

4. SIGABRT
调用abort函数生成的信号。

5. SIGFPE
在发生致命的算术运算错误时发出. 不仅包括浮点运算错误, 还包括溢出及除数为0等其它所有的算术的错误。

6. SIGKILL
用来立即结束程序的运行. 本信号不能被阻塞、处理和忽略。如果管理员发现某个进程终止不了，可尝试发送这个信号。
kill -9 pid

7. SIGTERM
程序结束(terminate)信号, 与SIGKILL不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出，shell命令kill缺省产生这个信号。如果进程终止不了，我们才会尝试SIGKILL。
kill pid

8. SIGPIPE
管道破裂。这个信号通常在进程间通信产生，比如采用FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到SIGPIPE信号。
这个很重要 ---> 此外用Socket通信的两个进程，写进程在写Socket的时候，读进程已经终止。

9. SIGCHLD
子进程结束时, 父进程会收到这个信号。
如果父进程没有处理这个信号，也没有等待(wait)子进程，子进程虽然终止，但是还会在内核进程表中占有表项，这时的子进程称为僵尸进程。这种情况我们应该避免(父进程或者忽略SIGCHILD信号，或者捕捉它，或者wait它派生的子进程，或者父进程先终止，这时子进程的终止自动由init进程来接管)。

10.
信号	产生方式	对进程的影响
sigint	通过ctrl+c将会对当进程发送此信号	信号被当前进程树接收到，也就是说，不仅当前进程会收到信号，它的子进程也会收到
sigterm	kill命令不加参数就是发送这个信号	只有当前进程收到信号，子进程不会收到。如果当前进程被kill了，那么它的子进程的父进程将会是init，也就是pid为1的进程

//stdout 标准输出
//stderr 标准错误
//_IOLBF 行缓冲

setvbuf(stdout, NULL, _IOLBF, 80);
setvbuf(stderr, NULL, _IOLBF, 80);
//SIGTERM kill正常退出
signal(SIGTERM, sighandler);
//SIGPIPE忽略这个新号，client发起连接，然后关闭读端，server往client发数据的时候，会收到这个信号，默认处理是关闭程序。
if (sigignore(SIGPIPE) == -1)
{
	printf("CenterServer %lld: can not ignore SIGPIPE\n", (long long int)getpid());
	return 1;
}